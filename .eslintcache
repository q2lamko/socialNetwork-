[{"/home/konstantin/WebstormProjects/socialNetwork-/src/index.tsx":"1","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/redux-store.ts":"2","/home/konstantin/WebstormProjects/socialNetwork-/src/App.tsx":"3","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/dialogs-reducer.ts":"4","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/auth-reducer.ts":"5","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/users-reducer.ts":"6","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/profile-reducer.tsx":"7","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/DialogsContainer.tsx":"8","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Users/UsersContainer.tsx":"9","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/ProfileContainer.tsx":"10","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Header/HeaderContainer.tsx":"11","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Login/Login.tsx":"12","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Navbar/Navbar.jsx":"13","/home/konstantin/WebstormProjects/socialNetwork-/src/API/API.ts":"14","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/Dialogs.tsx":"15","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Users/Users.tsx":"16","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/Profile.tsx":"17","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Header/Header.tsx":"18","/home/konstantin/WebstormProjects/socialNetwork-/src/HOC/withAuthRedirect.tsx":"19","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Common/Preloader/Preloader.tsx":"20","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/Message/Message.tsx":"21","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/myPosts/MyPostsContainer.tsx":"22","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/DialogsItem/DialogsItem.tsx":"23","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/ProfileInfo/ProfileInfo.tsx":"24","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/myPosts/MyPosts.tsx":"25","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/Post/Post.tsx":"26","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/profileStatus/profileStatus.tsx":"27","/home/konstantin/WebstormProjects/socialNetwork-/src/utils/validators/index.tsx":"28","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Common/formControls/formControls.tsx":"29"},{"size":699,"mtime":1627289998647,"results":"30","hashOfConfig":"31"},{"size":714,"mtime":1640594823839,"results":"32","hashOfConfig":"31"},{"size":1300,"mtime":1638076750559,"results":"33","hashOfConfig":"31"},{"size":1075,"mtime":1640682004861,"results":"34","hashOfConfig":"31"},{"size":1356,"mtime":1637910711845,"results":"35","hashOfConfig":"31"},{"size":4997,"mtime":1640341871776,"results":"36","hashOfConfig":"31"},{"size":2830,"mtime":1640686191306,"results":"37","hashOfConfig":"31"},{"size":1364,"mtime":1640682004869,"results":"38","hashOfConfig":"31"},{"size":2972,"mtime":1640253825830,"results":"39","hashOfConfig":"31"},{"size":1866,"mtime":1640346255282,"results":"40","hashOfConfig":"31"},{"size":1017,"mtime":1638076750559,"results":"41","hashOfConfig":"31"},{"size":1334,"mtime":1640685102573,"results":"42","hashOfConfig":"31"},{"size":808,"mtime":1630323532892,"results":"43","hashOfConfig":"31"},{"size":1857,"mtime":1640348281141,"results":"44","hashOfConfig":"31"},{"size":1817,"mtime":1640681716420,"results":"45","hashOfConfig":"31"},{"size":2417,"mtime":1637910711845,"results":"46","hashOfConfig":"31"},{"size":647,"mtime":1640346119625,"results":"47","hashOfConfig":"31"},{"size":711,"mtime":1637910711845,"results":"48","hashOfConfig":"31"},{"size":789,"mtime":1638076750559,"results":"49","hashOfConfig":"31"},{"size":243,"mtime":1635750744123,"results":"50","hashOfConfig":"31"},{"size":724,"mtime":1627289998647,"results":"51","hashOfConfig":"31"},{"size":1920,"mtime":1640685920460,"results":"52","hashOfConfig":"31"},{"size":447,"mtime":1636724729403,"results":"53","hashOfConfig":"31"},{"size":1136,"mtime":1640423707818,"results":"54","hashOfConfig":"31"},{"size":2455,"mtime":1640701969535,"results":"55","hashOfConfig":"31"},{"size":478,"mtime":1640687867779,"results":"56","hashOfConfig":"31"},{"size":2344,"mtime":1640431343410,"results":"57","hashOfConfig":"31"},{"size":273,"mtime":1640693481916,"results":"58","hashOfConfig":"31"},{"size":482,"mtime":1640708559957,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"gjvp44",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/konstantin/WebstormProjects/socialNetwork-/src/index.tsx",[],["127","128"],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/redux-store.ts",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/App.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/dialogs-reducer.ts",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/auth-reducer.ts",["129","130","131"],"import {ActionsTypes} from \"./state\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, usersAPI} from \"../../API/API\";\r\nimport {setToggleInFollow, unfollowSuccess} from \"./users-reducer\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\n\r\nexport type InitialStateType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    autorisation: boolean\r\n\r\n}\r\nlet initialState: InitialStateType = {\r\n    id: 2,\r\n    email: \"\",\r\n    login: \"\",\r\n    autorisation: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                autorisation: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type dataType = {\r\n    id: number, email: string, login: string,\r\n}\r\nexport const setAuthUserData = (data: dataType) => {\r\n    return {\r\n        type: SET_USER_DATA, data\r\n    } as const\r\n}\r\n\r\nexport const auth = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.getAuth().then(response => {\r\n            if (response.resultCode === 0) {\r\n                // let {id,login,email} = response.data.data\r\n                dispatch(setAuthUserData(response.data))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/users-reducer.ts",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Redux/profile-reducer.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/DialogsContainer.tsx",["132"],"import React, {ComponentType} from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {InitialStateType, sendMessageBodyActionCreator} from \"../Redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport WithAuthRedirect from \"../../HOC/withAuthRedirect\";\r\n\r\nexport type DialogDataType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n    autorisation: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    onSendMessageClick: (newMessageBody: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        autorisation: state.auth.autorisation\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageBodyActionCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport type DialogsPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Users/UsersContainer.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/ProfileContainer.tsx",["133"],"import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {UserType} from \"../Redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {getStatus, getUserProfile,updateStatus} from \"../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport WithAuthRedirect from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: UserType | null\r\n    status: string\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\nexport type  ProfilePropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType;\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\r\n        {\r\n            getUserProfile,\r\n            getStatus,\r\n            updateStatus\r\n        }),\r\n    // WithAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Header/HeaderContainer.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Login/Login.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Navbar/Navbar.jsx",[],["134","135"],"/home/konstantin/WebstormProjects/socialNetwork-/src/API/API.ts",["136","137"],"import axios from \"axios\";\r\nimport {UserType} from \"../components/Redux/users-reducer\";\r\nimport {log} from \"util\";\r\n\r\ntype UsersResponseType = {\r\n    error: string\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"aadc669d-1160-4bb6-9593-bfb607ec835d\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    getProfile(userId: string) {\r\n        return instance.get<UserType>(`profile/` + userId)\r\n            .then(response => response.data)\r\n\r\n        // profileAPI.getSingleUser(userId)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<getFollowResponseType>(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<getFollowResponseType>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getStatus(userId: string) {\r\n        return instance.get<any>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<updateStatusType>(`profile/status`, {status})\r\n    }\r\n}\r\n\r\ntype getStatus ={\r\n    data:string\r\n}\r\ntype updateStatusType = {\r\n    resultCode: number\r\n    messages: string\r\n    data: any\r\n}\r\n\r\ntype getAuthResponseType = {\r\n    data: { id: number, login: string, email: string }\r\n    resultCode: number\r\n}\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<getAuthResponseType>(`auth/me`).then(response => response.data)\r\n    }\r\n}\r\n\r\ntype getFollowResponseType = {\r\n    data: { id: number, login: string, email: string }\r\n    resultCode: number\r\n}\r\n\r\n\r\n","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/Dialogs.tsx",["138","139","140"],"import classes from \"./Dialogs.module.css\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport DialogItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, FormSubmitHandler, InjectedFormProps, reduxForm, SubmitHandler} from \"redux-form\";\r\n\r\nconst SecretDialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n    let DialogsDataMap = state.DialogsData.map((d,id) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let MessageDataMap = state.messagesData.map((m,id) => <Message message={m.message} key={m.id} id={m.id}/>);\r\n\r\n\r\n    const addNewMessage = (value: any) => {\r\n        props.onSendMessageClick(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {DialogsDataMap}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{MessageDataMap}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={'textarea'} name={'newMessageBody'} placeholder={\"enter your message\"}/>\r\n                <div>\r\n                    <button >send</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form:\"AddMessageForm\"})(AddMessageForm)\r\n\r\nconst Dialogs = React.memo(SecretDialogs)\r\nexport default Dialogs;","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Users/Users.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/Profile.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Header/Header.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/HOC/withAuthRedirect.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Common/Preloader/Preloader.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/Message/Message.tsx",["141"],"import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../DialogsContainer\";\r\n\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n    let addPost = () => {\r\n        let text = newPostElement.current?.value;\r\n        alert(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n            {/*<div>*/}\r\n            {/*    <textarea ref={newPostElement}></textarea>*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <button onClick={addPost}>Добавить</button>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/myPosts/MyPostsContainer.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Dialogs/DialogsItem/DialogsItem.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/ProfileInfo/ProfileInfo.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/myPosts/MyPosts.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/Post/Post.tsx",["142"],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Profile/profileStatus/profileStatus.tsx",["143"],"import React, {ChangeEvent, useState} from 'react';\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nclass ProfileStatus extends React.Component<PropsType, any> {\n\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n    activateMode = () => {\n        this.setState({\n            editMode: true\n        });\n    }\n    deactivateMode = () => {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateStatus(this.state.status)\n    }\n    onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        })\n\n    }\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<any>, snapshot?: any) {\n       if (prevProps.status !== this.props.status) {\n           this.setState({\n               status:this.props.status\n           })\n       }\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={this.activateMode}>{this.props.status || '--------'} </span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateMode} value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n\n}\n\n// const ProfileStatus = React.memo((props: PropsType) => {\n//\n//     const [edit, setEdit] = useState(false);\n//     const [value, setValue] = useState('')\n//\n//     const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\n//     const viewModeHandler = () => setEdit(false)\n//\n//\n//     return (\n//         <> {edit ?\n//             <div>\n//                 <input\n//                     onChange={onChangeHandler}\n//                     autoFocus\n//                     value={value}\n//                     onBlur={viewModeHandler}\n//                 />\n//             </div>\n//             :\n//             <div>\n//                 <span onClick={() => setEdit(true)}>{props.status}</span>\n//                 <span onClick={() => setEdit(true)}>{value}</span>\n//             </div>\n//         }\n//\n//         </>\n//\n//     );\n// });\n\nexport default ProfileStatus;","/home/konstantin/WebstormProjects/socialNetwork-/src/utils/validators/index.tsx",[],"/home/konstantin/WebstormProjects/socialNetwork-/src/components/Common/formControls/formControls.tsx",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":3,"column":18,"nodeType":"150","messageId":"151","endLine":3,"endColumn":26},{"ruleId":"148","severity":1,"message":"152","line":4,"column":9,"nodeType":"150","messageId":"151","endLine":4,"endColumn":26},{"ruleId":"148","severity":1,"message":"153","line":4,"column":28,"nodeType":"150","messageId":"151","endLine":4,"endColumn":43},{"ruleId":"148","severity":1,"message":"154","line":1,"column":8,"nodeType":"150","messageId":"151","endLine":1,"endColumn":13},{"ruleId":"148","severity":1,"message":"155","line":8,"column":8,"nodeType":"150","messageId":"151","endLine":8,"endColumn":24},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"156","line":3,"column":9,"nodeType":"150","messageId":"151","endLine":3,"endColumn":12},{"ruleId":"148","severity":1,"message":"157","line":46,"column":6,"nodeType":"150","messageId":"151","endLine":46,"endColumn":15},{"ruleId":"148","severity":1,"message":"158","line":2,"column":16,"nodeType":"150","messageId":"151","endLine":2,"endColumn":27},{"ruleId":"148","severity":1,"message":"159","line":6,"column":16,"nodeType":"150","messageId":"151","endLine":6,"endColumn":33},{"ruleId":"148","severity":1,"message":"160","line":6,"column":65,"nodeType":"150","messageId":"151","endLine":6,"endColumn":78},{"ruleId":"148","severity":1,"message":"161","line":8,"column":9,"nodeType":"150","messageId":"151","endLine":8,"endColumn":16},{"ruleId":"148","severity":1,"message":"162","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":10},{"ruleId":"148","severity":1,"message":"163","line":1,"column":29,"nodeType":"150","messageId":"151","endLine":1,"endColumn":37},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'usersAPI' is defined but never used.","Identifier","unusedVar","'setToggleInFollow' is defined but never used.","'unfollowSuccess' is defined but never used.","'React' is defined but never used.","'WithAuthRedirect' is defined but never used.","'log' is defined but never used.","'getStatus' is defined but never used.","'ChangeEvent' is defined but never used.","'FormSubmitHandler' is defined but never used.","'SubmitHandler' is defined but never used.","'addPost' is assigned a value but never used.","'cl' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]